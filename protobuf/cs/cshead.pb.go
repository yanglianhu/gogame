// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cshead.proto

package cs

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CSHead struct {
	CmdId                uint32   `protobuf:"varint,1,opt,name=CmdId,proto3" json:"CmdId,omitempty"`
	SeqId                uint32   `protobuf:"varint,2,opt,name=SeqId,proto3" json:"SeqId,omitempty"`
	RetCode              uint32   `protobuf:"varint,3,opt,name=RetCode,proto3" json:"RetCode,omitempty"`
	Uid                  uint64   `protobuf:"varint,4,opt,name=Uid,proto3" json:"Uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSHead) Reset()         { *m = CSHead{} }
func (m *CSHead) String() string { return proto.CompactTextString(m) }
func (*CSHead) ProtoMessage()    {}
func (*CSHead) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc633f90289b133, []int{0}
}
func (m *CSHead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSHead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CSHead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CSHead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSHead.Merge(m, src)
}
func (m *CSHead) XXX_Size() int {
	return m.Size()
}
func (m *CSHead) XXX_DiscardUnknown() {
	xxx_messageInfo_CSHead.DiscardUnknown(m)
}

var xxx_messageInfo_CSHead proto.InternalMessageInfo

func (m *CSHead) GetCmdId() uint32 {
	if m != nil {
		return m.CmdId
	}
	return 0
}

func (m *CSHead) GetSeqId() uint32 {
	if m != nil {
		return m.SeqId
	}
	return 0
}

func (m *CSHead) GetRetCode() uint32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *CSHead) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func init() {
	proto.RegisterType((*CSHead)(nil), "cs.CSHead")
}

func init() { proto.RegisterFile("cshead.proto", fileDescriptor_0fc633f90289b133) }

var fileDescriptor_0fc633f90289b133 = []byte{
	// 146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x2e, 0xce, 0x48,
	0x4d, 0x4c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4a, 0x2e, 0x56, 0x4a, 0xe0, 0x62,
	0x73, 0x0e, 0xf6, 0x48, 0x4d, 0x4c, 0x11, 0x12, 0xe1, 0x62, 0x75, 0xce, 0x4d, 0xf1, 0x4c, 0x91,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0d, 0x82, 0x70, 0x40, 0xa2, 0xc1, 0xa9, 0x85, 0x9e, 0x29, 0x12,
	0x4c, 0x10, 0x51, 0x30, 0x47, 0x48, 0x82, 0x8b, 0x3d, 0x28, 0xb5, 0xc4, 0x39, 0x3f, 0x25, 0x55,
	0x82, 0x19, 0x2c, 0x0e, 0xe3, 0x0a, 0x09, 0x70, 0x31, 0x87, 0x66, 0xa6, 0x48, 0xb0, 0x28, 0x30,
	0x6a, 0xb0, 0x04, 0x81, 0x98, 0x4e, 0xe2, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8,
	0xe0, 0x91, 0x1c, 0xe3, 0x8c, 0xc7, 0x72, 0x0c, 0x51, 0xac, 0x7a, 0xfa, 0xd6, 0xc9, 0xc5, 0x49,
	0x6c, 0x60, 0x57, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x5b, 0x63, 0xf8, 0x95, 0x00,
	0x00, 0x00,
}

func (m *CSHead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSHead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSHead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Uid != 0 {
		i = encodeVarintCshead(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x20
	}
	if m.RetCode != 0 {
		i = encodeVarintCshead(dAtA, i, uint64(m.RetCode))
		i--
		dAtA[i] = 0x18
	}
	if m.SeqId != 0 {
		i = encodeVarintCshead(dAtA, i, uint64(m.SeqId))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdId != 0 {
		i = encodeVarintCshead(dAtA, i, uint64(m.CmdId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCshead(dAtA []byte, offset int, v uint64) int {
	offset -= sovCshead(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CSHead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdId != 0 {
		n += 1 + sovCshead(uint64(m.CmdId))
	}
	if m.SeqId != 0 {
		n += 1 + sovCshead(uint64(m.SeqId))
	}
	if m.RetCode != 0 {
		n += 1 + sovCshead(uint64(m.RetCode))
	}
	if m.Uid != 0 {
		n += 1 + sovCshead(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCshead(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCshead(x uint64) (n int) {
	return sovCshead(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CSHead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCshead
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSHead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSHead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdId", wireType)
			}
			m.CmdId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCshead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqId", wireType)
			}
			m.SeqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCshead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCshead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCshead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCshead(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCshead
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCshead(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCshead
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCshead
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCshead
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCshead
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCshead
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCshead
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCshead        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCshead          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCshead = fmt.Errorf("proto: unexpected end of group")
)
